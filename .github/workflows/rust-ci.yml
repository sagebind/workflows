on:
  workflow_call:
    inputs:
      features:
        description: Non-default crate features to test
        required: false
        type: string
      msrv:
        description: Minimum supported Rust version
        default: stable
        required: false
        type: string
      timeout-minutes:
        description: The maximum number of minutes to let the job run
        default: 20
        required: false
        type: number

jobs:
  # Run all tests on minimum supported Rust version and on nightly.
  test:
    name: Run tests
    strategy:
      matrix:
        toolchain:
          - ${{ inputs.msrv }}
          - nightly
        os:
          - ubuntu-latest
          # https://github.com/rust-lang/rust/issues/103044
          - ${{ inputs.msrv < 1.54 && 'macos-11' || 'macos-latest' }}
          - windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          default: true

      # Generate lock file if one is not committed to the repo.
      - name: Update Cargo.lock
        run: cargo update
        if: hashFiles('Cargo.lock') != ''

      - name: Cache Cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Run tests
        run: cargo test --features=${{ inputs.features }}

  clippy:
    name: Run Clippy lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Clippy
        run: rustup component add clippy

      - name: Run Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features=${{ inputs.features }}
